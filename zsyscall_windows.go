// Code generated by 'go generate'; DO NOT EDIT.

package main

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modgdi32  = windows.NewLazySystemDLL("gdi32.dll")
	moduser32 = windows.NewLazySystemDLL("user32.dll")

	procAddFontResourceW     = modgdi32.NewProc("AddFontResourceW")
	procGetFontResourceInfoW = modgdi32.NewProc("GetFontResourceInfoW")
	procRemoveFontResourceW  = modgdi32.NewProc("RemoveFontResourceW")
	procSendMessageTimeoutW  = moduser32.NewProc("SendMessageTimeoutW")
	procSendMessageW         = moduser32.NewProc("SendMessageW")
)

func AddFontResource(fontPath *uint16) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall(procAddFontResourceW.Addr(), 1, uintptr(unsafe.Pointer(fontPath)), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetFontResourceInfo(fontPath *uint16, bufferSize *uint32, buffer uintptr, queryType uint32) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(procGetFontResourceInfoW.Addr(), 4, uintptr(unsafe.Pointer(fontPath)), uintptr(unsafe.Pointer(bufferSize)), uintptr(buffer), uintptr(queryType), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func RemoveFontResource(fontPath *uint16) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall(procRemoveFontResourceW.Addr(), 1, uintptr(unsafe.Pointer(fontPath)), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func SendMessageTimeoutW(hWnd uintptr, msg uint32, wParam uintptr, lParam uintptr, fuFlags uintptr, uTimeout uintptr, lpdwResult *uintptr) (ret uintptr, err error) {
	r0, _, e1 := syscall.Syscall9(procSendMessageTimeoutW.Addr(), 7, uintptr(hWnd), uintptr(msg), uintptr(wParam), uintptr(lParam), uintptr(fuFlags), uintptr(uTimeout), uintptr(unsafe.Pointer(lpdwResult)), 0, 0)
	ret = uintptr(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}

func SendMessage(hWnd uintptr, msg uint32, wParam uintptr, lParam uintptr) (ret int32, err error) {
	r0, _, e1 := syscall.Syscall6(procSendMessageW.Addr(), 4, uintptr(hWnd), uintptr(msg), uintptr(wParam), uintptr(lParam), 0, 0)
	ret = int32(r0)
	if ret == 0 {
		err = errnoErr(e1)
	}
	return
}
